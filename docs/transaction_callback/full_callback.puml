@startuml

title put_transfer_callback


box "PISP"
    participant "PISP Server" as D1
end box
box "Mojaloop"
    participant "Thirdparty API Adapter" as 3P
    participant "Central Event Processor" as CEP
    participant "ML API Adapter" as ML
    participant "Central Ledger" as CL
end box
box "DFSP A"
    participant "DFSP A\n(Payer)" as D2
end box
box "DFSP B"
    participant "DFSP B\n(Payee)" as D3
end box

note over CEP
It is assumed that:
-> Messages are exchanged _within_ the switch with Kafka Messages unless explicitly stated
end note


== Subscription ==

rnote over D1 #Light
**""POST /thirdpartyRequests/transactions""**
""FSPIOP-Source: pispa""
""FSPIOP-Destination: dfspa""
{
    transactionRequestId: "1234",
    ...
}
end note
D1 -> 3P: ""POST /thirdpartyRequests/transactions""
3P -> CEP: Please start listening for \n *things* related to the transferRequestId of ""1234""
3P --> D1: ""202 Accepted""
3P -> D2: ""POST /thirdpartyRequests/transactions""

... **Transaction initiation takes place** ...

== Context Gathering ==
note over CEP
The CEP now must listen in to other events related to the transactionRequestId of ""1234""
in order to build enough context to listen for the right ""PUT /transfers/{id}""
end note


' I think this should be the authorizations, since it hits
' the 3p api adapter already, but it could be on the quote
' response
rnote over D2 #Light
**""POST /authorizations""**
""FSPIOP-Source: pispa""
""FSPIOP-Destination: dfspa""
{
    transactionRequestId: "1234",
    quote
    ...
}
end note
D2 -> 3P: ""POST /authorizations""

' 3P Just publishes all events onto kafka for later consumption
3P -> CEP: Here's an event... not sure if it means anything to you
3P --> D2: ""202 Accepted""

3P -> D1: ""POST /authorizations""
D1 --> 3P: ""202 Accepted""

CEP -> CEP: That event was related to the \ntransactionRequestId of ""1234""\nlet's save it for later
CEP -> CEP: It had a quote with a transactionId  of ""5678""\nlet's now listen for transactionIds of ""5678""

'did Michael say we should also listen for `POST /transfers`?

... **User signs the authorization, DFSPA verifies it, and issues a ""POST /transfers""** ...

rnote over D2 #Light
**""POST /transfers""**
""FSPIOP-Source: dfspa""
""FSPIOP-Destination: dfspb""
{
    transferId: "9876",
    **transactionId: 5678**
    ...
}
end note
D2 -> ML: ""POST /transfers""
ML --> D2: 202 Accepted

' TODO: tidy and clarify these steps
' it could be the ml-api-adapters event that triggers the CEP
' we need to look a little more into how the central-ledger's handlers work

ML -> CL: Transfer is going ahead... can you check these details?
CL -> ML: Yep, looks good to me

CL -> CEP: Here's a transfer that looks like it might go ahead. 

ML -> D3: ""POST /transfers""

CEP -> CEP: That transfer has a transactionId of ""5678""
CEP -> CEP: It had a transferId of ""9876""\n let's now listen for transfers with id ""5678""

note over CEP
The CEP now knows that it needs to listen for transfers with id  ""9876""
in order to fulfil it's original subscription
end note

== Notification ==

... **Transaction agreement takes place**\n**DFSPA intiates transfer, and now waits to hear back from DFSPB** ...


rnote over D3 #Light
**""PUT /transfers/9876""**
""FSPIOP-Source: dfspb""
""FSPIOP-Destination: dfspa""
{
    transferState: "COMMITTED"
}
end note

D3 -> ML: ""PUT /transfers/9876""

ML -> CL: Transfer accepted by the Payee DFSP

CL -> ML: Please notify the DFSPA
CL -> CEP: Here's a notification as well, since we're all talking over Kafka.\nThe transferId is ""9876""

CEP -> CEP: We were waiting for a transfer with a tranferId of ""9876""
CEP -> 3P: A transfer you subscribed to just occurred

rnote over 3P #Light
**""PUT /thirdpartyRequests/transactions/1234""**
""FSPIOP-Source: pispa""
""FSPIOP-Destination: dfspa""
{
    state: "ACCEPTED"
    ...
}
end note
3P -> D1: ""PATCH /thirdpartyRequests/transactions/1234""

CEP -> CEP: Stop listening for transfers with transferId of ""9876""

@enduml
