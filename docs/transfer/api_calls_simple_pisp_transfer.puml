@startuml

title PISPTransferSimpleAPI

!include participants_api.iuml

note over S
This document aims to demonstrate the high level API Calls between the PISP, Mojaloop Hub and DFSPs.
end note


== Discovery (Lookup) ==
note over D1
PISPTransactionModel Lookup phase
end note

D1 -> S: ""GET /parties/MSISDN/+4412345678""
... Get participants/parties flow not shown here ...
S -> D3: ""GET /parties/MSISDN/+4412345678""
D3 -> S: ""PUT /parties/MSISDN/+4412345678""
S -> D1: ""PUT /parties/MSISDN/+4412345678""
... PISP confirms payee party with their user ...

== Agreement Phase ==
note over D1
PISPTransactionModel Initiate phase
end note

D1 -> S: ""POST /thirdpartyRequests/transactions""
S -> D2_3psa_in: ""POST /thirdpartyRequests/transactions""

D2_3psa_in -> D2_3psa_in: Lookup this ""consentId"", ""sourceAccountId"" \nand ""pispId"". Verify that they exist, and consent \nis granted with a valid credential

D2_3psa_in -> D2_sdksa_out: sync POST /requestToPayTransfer
D2_sdksa_out -> D2_sdksa_out: OutboundRequestToPayTransferModel starts workflow with PISP Authorization
D2_sdksa_out -> S: ""POST /quotes""
S -> D3: ""POST /quotes""
D3 -> S: ""PUT /quotes/456""
S -> D2_sdksa_out: ""PUT /quotes/456""

note left of D2
  DFSPA has the quote, they can now ask
  the PISP for authorization
end note

D2_sdksa_out -> S: ""POST /authorizations""
S -> D1: ""POST /authorizations""

note right of D1
  PISP checks the quote with the user,
  and uses FIDO to sign the the QuoteResponse object
end note

note over D1
PISPTransactionModel Approve phase
end note

D1 -> S: ""PUT /authorizations/123""
S -> D2_sdksa_in: ""PUT /authorizations/123""

D2_sdksa_in ->D2_sdksa_in: Lookup the ""thirdpartyRequests/transaction""\nrequest, get the ""consentId"" and ""sourceAccountId""
D2_sdksa_in -> D2_sdksa_in: Confirm pispId from ""PUT /authorizations/123""\n matches the ""thirdpartyRequests/transaction""

D2_sdksa_in -> D2_3psa_out: sync call POST /verify-authorization

note over D2
  Switch has the signed condition
  For 3rd party FIDO, it now needs to make sure everything checks out
end note

D2_3psa_out -> S: ""POST /thirdpartyRequests/transactions""\n""     /123/authorizations""
S -> AUTHS: ""POST /thirdpartyRequests/transactions""\n""     /123/authorizations""

AUTHS -> AUTHS: Lookup this consent based on consentId
AUTHS -> AUTHS: Ensure the sourceAccountId matches what is in Consent
AUTHS -> AUTHS: Check that the signed bytes match the \npublickey we have stored for the consent

AUTHS -> S: ""PUT /thirdpartyRequests/transactions""\n""    /123/authorizations""
S -> D2_3psa_out: ""PUT /thirdpartyRequests/transactions""\n""    /123/authorizations""

D2_3psa_out -> D2_sdksa_in: sync response POST /verify-authorization

note over D2
  DFSPA now knows that the user signed this transaction
  and can go ahead and initiate the transfer
end note

== Transfer Phase ==

D2 -> S: POST /transfers
S -> D3: POST /transfers
D3 -> S: PUT /transfers/321
S -> D2_sdksa_in: PUT /transfers/321
D2_sdksa_in -> D2_sdksa_out: notify via redis-cache 
D2_sdksa_out -> D2_sdksa_out: OutboundRequestToPayTransferModel workflow ends 
D2_sdksa_out -> D2_3psa_in: sync response POST /requestToPayTransfer

note over D2_3psa_in
  DFSPA 3psa_in now knows that transfer initiated by PISP has ended and notify PISP about the outcome
end note
D2_3psa_in -> D1: PATCH /thirdpartyRequests/transactions/123

@enduml
