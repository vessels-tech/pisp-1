# DO NOT EDIT THIS FILE DIRECTLY!!!! INSTEAD, EDIT /src/interface/api-template.yaml and run `npm run build:openapi` TO UPDATE THIS FILE
openapi: 3.0.2
info:
  title: Mojaloop Thirdparty API Adapter
  version: '1.0'
  description: A Mojaloop API for thirdparty interactions between `PISPs` (Payment Initiation Service Providers) and `DFSPs` (Digital Financial Service Providers)
  license:
    name: TBD
    url: TBD
servers:
  - url: /
paths:
  /participants:
    get:
      tags:
        - participants
      operationId: GetAllParticipants
      summary: GetAllParticipants
      description: |
        Get all participants available to support PISP functionality
      responses:
        '200':
          description: Accepted
  '/parties/OPAQUE/{ID}':
    get:
      tags:
        - parties
      operationId: GetPartiesOpaque
      summary: GetPartiesOpaque
      description: |
        Get the party information from a known participant
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      responses:
        '202':
          $ref: '#/paths/~1participants/get/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  /consentRequests:
    post:
      tags:
        - consentRequests
        - sampled
      operationId: CreateConsentRequest
      summary: CreateConsentRequest
      description: |
        A request from a PISP to a DFSP to start the process of delegating consent
      parameters:
        - $ref: '#/paths/~1authorizations/post/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: The consentRequest to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsentRequest'
            example:
              id: '456'
              initiatorId: pispA
              authChannels:
                - WEB
                - OTP
              scopes:
                - accountId: dfspa.username.1234
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
                - accountId: dfspa.username.5678
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
              callbackUri: 'pisp-app://callback.com'
      responses:
        '202':
          $ref: '#/paths/~1participants/get/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  '/consentRequests/{ID}':
    put:
      tags:
        - consentRequests
      operationId: UpdateConsentRequest
      summary: UpdateConsentRequest
      description: |
        PISP updates the consentRequest to include authorization from their user
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: The updated consentRequest body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsentRequest'
            example:
              id: '456'
              initiatorId: pispA
              authChannels:
                - WEB
              scopes:
                - accountId: dfspa.username.1234
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
                - accountId: dfspa.username.5678
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
              callbackUri: 'pisp-app://callback.com'
              authUri: 'https://dfspa.com/login'
              authToken: abcde-12345
      responses:
        '202':
          $ref: '#/paths/~1participants/get/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  '/consents/{ID}/generateChallenge':
    post:
      tags:
        - consents
      operationId: GenerateChallengeRequest
      summary: GenerateChallengeRequest
      description: |
        PISP requests a challenge from the auth service
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: GenerateChallengeRequest Body
        required: true
        content:
          application/json:
            schema:
              title: ConsentGenerateChallengeIDPostRequest
              type: object
              description: |
                A credential used to allow a user to prove their identity
                and access to an account with a DFSP.
              properties:
                type:
                  title: CredentialType
                  type: string
                  enum:
                    - FIDO
                  description: |
                    The type of the Credential.
                    - "FIDO" - A FIDO public/private keypair.
              required:
                - type
            example:
              type: FIDO
      responses:
        '202':
          $ref: '#/paths/~1participants/get/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  '/consents/{ID}':
    put:
      tags:
        - consents
      operationId: UpdateConsentRequest
      summary: UpdateConsentRequest
      description: |
        PISP updates consent object with signed challenge and key information
      parameters:
        - name: ID
          in: path
          required: true
          schema:
            type: string
          description: The identifier value.
        - $ref: '#/paths/~1authorizations/post/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: GenerateChallengeRequest Body
        required: true
        content:
          application/json:
            schema:
              title: ConsentIDPutRequest
              type: object
              description: Data model for the complex type Consent.
              properties:
                requestId:
                  allOf:
                    - $ref: '#/components/schemas/CreateConsentRequest/properties/id'
                  description: |
                    The id of the ConsentRequest that was used to initiate the
                    creation of this Consent.
                participantId:
                  title: FspId
                  type: string
                  minLength: 1
                  maxLength: 32
                  description: FSP identifier.
                  example: 1234
                initiatorId:
                  allOf:
                    - $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/participantId'
                  description: PISP identifier who uses this Consent.
                scopes:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateConsentRequest/properties/scopes/items'
                credential:
                  title: UpdatedCredential
                  type: object
                  description: |
                    A credential used to allow a user to prove their identity and access
                    to an account with a DFSP.

                    UpdatedCredential is a special formatting of the credential to allow us to be
                    more explict about the `status` field - it should only ever be PENDING when updating
                    a credential.
                  properties:
                    id:
                      type: string
                      description: The id of a Credential.
                    type:
                      $ref: '#/paths/~1consents~1%7BID%7D~1generateChallenge/post/requestBody/content/application~1json/schema/properties/type'
                    status:
                      title: CredentialStatusType
                      type: string
                      enum:
                        - PENDING
                        - ACTIVE
                      description: |
                        The status of the Credential's creation
                        - "PENDING" - The PISP has requested a challenge, or the challenge has
                                      initialized but not yet answered by the PISP.
                        - "VERIFIED" - The Credential is valid, and ready to be used by the PISP.
                    challenge:
                      title: CredentialChallenge
                      type: object
                      description: |
                        The challenge issued by a DFSP that must be answered by the PISP.
                      properties:
                        payload:
                          type: string
                          description: Base64 encoded binary of the challenge that must be answered by the PISP.
                        signature:
                          type: string
                          description: Base64 encoded binary string or result of the payload signed by the PISP using the private key.
                      required:
                        - payload
                    payload:
                      type: string
                      description: Base64 encoded bytes - The public key of the Public/Private keypair.
                  required:
                    - id
                    - type
                    - status
                    - challenge
                    - payload
              required:
                - requestId
                - participantId
                - initiatorId
                - scopes
                - credential
            example:
              type: FIDO
      responses:
        '202':
          $ref: '#/paths/~1participants/get/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  /thirdpartyRequests/transactions:
    post:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: CreateThirdpartyTransactionRequests
      summary: CreateThirdpartyTransactionRequests
      description: |
        The HTTP request `POST /thirdpartyRequests/transactions` is used to request the creation of a third party transaction.
        - Called by a `PISP` to initiate a third party transaction flow
      parameters:
        - $ref: '#/paths/~1authorizations/post/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: Transaction request to be created.
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyTransactionPostRequest
              type: object
              description: The object sent in the POST /thirdpartyRequests/transactions request.
              properties:
                transactionRequestId:
                  allOf:
                    - $ref: '#/components/schemas/CreateConsentRequest/properties/id'
                  description: |
                    Common ID between the FSPs for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.
                sourceAccountId:
                  allOf:
                    - title: AccountAddress
                      type: string
                      description: |
                        A long-lived unique account identifier provided by the DFSP. This MUST NOT
                        be Bank Account Number or anything that may expose a User's private bank
                        account information.
                      pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                      minLength: 1
                      maxLength: 1023
                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
                consentId:
                  allOf:
                    - $ref: '#/components/schemas/CreateConsentRequest/properties/id'
                  description: |
                    Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
                payee:
                  allOf:
                    - title: Party
                      type: object
                      description: Data model for the complex type Party.
                      properties:
                        partyIdInfo:
                          title: PartyIdInfo
                          type: object
                          description: Data model for the complex type PartyIdInfo.
                          properties:
                            partyIdType:
                              title: PartyIdType
                              type: string
                              enum:
                                - MSISDN
                                - EMAIL
                                - PERSONAL_ID
                                - BUSINESS
                                - DEVICE
                                - ACCOUNT_ID
                                - IBAN
                                - ALIAS
                              description: |
                                Below are the allowed values for the enumeration.
                                - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
                                Number, that is, the phone number) is used as reference to a participant.
                                The MSISDN identifier should be in international format according to the
                                [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
                                Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
                                international prefix.
                                - EMAIL - An email is used as reference to a
                                participant. The format of the email should be according to the informational
                                [RFC 3696](https://tools.ietf.org/html/rfc3696).
                                - PERSONAL_ID - A personal identifier is used as reference to a participant.
                                Examples of personal identification are passport number, birth certificate
                                number, and national registration number. The identifier number is added in
                                the PartyIdentifier element. The personal identifier type is added in the
                                PartySubIdOrType element.
                                - BUSINESS - A specific Business (for example, an organization or a company)
                                is used as reference to a participant. The BUSINESS identifier can be in any
                                format. To make a transaction connected to a specific username or bill number
                                in a Business, the PartySubIdOrType element should be used.
                                - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
                                specific business or organization is used as reference to a Party.
                                For referencing a specific device under a specific business or organization,
                                use the PartySubIdOrType element.
                                - ACCOUNT_ID - A bank account number or FSP account ID should be used as
                                reference to a participant. The ACCOUNT_ID identifier can be in any format,
                                as formats can greatly differ depending on country and FSP.
                                - IBAN - A bank account number or FSP account ID is used as reference to a
                                participant. The IBAN identifier can consist of up to 34 alphanumeric
                                characters and should be entered without whitespace.
                                - ALIAS An alias is used as reference to a participant. The alias should be
                                created in the FSP as an alternative reference to an account owner.
                                Another example of an alias is a username in the FSP system.
                                The ALIAS identifier can be in any format. It is also possible to use the
                                PartySubIdOrType element for identifying an account under an Alias defined
                                by the PartyIdentifier.
                              example: PERSONAL_ID
                            partyIdentifier:
                              title: PartyIdentifier
                              type: string
                              minLength: 1
                              maxLength: 128
                              description: Identifier of the Party.
                              example: 16135551212
                            partySubIdOrType:
                              title: PartySubIdOrType
                              type: string
                              minLength: 1
                              maxLength: 128
                              description: |
                                Either a sub-identifier of a PartyIdentifier, or a sub-type of the
                                PartyIdType, normally a PersonalIdentifierType.
                              example: DRIVING_LICENSE
                            fspId:
                              $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/properties/participantId'
                          required:
                            - partyIdType
                            - partyIdentifier
                        merchantClassificationCode:
                          title: MerchantClassificationCode
                          type: string
                          pattern: '^[\d]{1,4}$'
                          description: |
                            A limited set of pre-defined numbers. This list would be a limited set of
                            numbers identifying a set of popular merchant types like School Fees,
                            Pubs and Restaurants, Groceries, etc.
                          example: 4321
                        name:
                          title: PartyName
                          type: string
                          minLength: 1
                          maxLength: 128
                          description: Name of the Party. Could be a real name or a nickname.
                          example: Henrik Karlsson
                        personalInfo:
                          title: PartyPersonalInfo
                          type: object
                          description: Data model for the complex type PartyPersonalInfo.
                          properties:
                            complexName:
                              title: PartyComplexName
                              type: object
                              description: Data model for the complex type PartyComplexName.
                              properties:
                                firstName:
                                  title: FirstName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: First name of the Party (Name Type).
                                  example: Henrik
                                middleName:
                                  title: MiddleName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: Middle name of the Party (Name Type).
                                  example: Johannes
                                lastName:
                                  title: LastName
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  pattern: '^(?!\s*$)[\w .,''-]{1,128}$'
                                  description: Last name of the Party (Name Type).
                                  example: Karlsson
                            dateOfBirth:
                              title: DateofBirth (type Date)
                              type: string
                              pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$'
                              description: Date of Birth of the Party.
                              example: '1966-06-16'
                      required:
                        - partyIdInfo
                  description: Information about the Payee in the proposed financial transaction.
                payer:
                  allOf:
                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payee/allOf/0'
                  description: Information about the Payer in the proposed financial transaction.
                amountType:
                  allOf:
                    - title: AmountType
                      type: string
                      enum:
                        - SEND
                        - RECEIVE
                      description: |
                        Below are the allowed values for the enumeration AmountType.
                        - SEND - Amount the Payer would like to send, that is, the amount that should
                        be withdrawn from the Payer account including any fees.
                        - RECEIVE - Amount the Payer would like the Payee to receive, that is,
                        the amount that should be sent to the receiver exclusive of any fees.
                      example: RECEIVE
                  description: 'SEND for sendAmount, RECEIVE for receiveAmount.'
                amount:
                  allOf:
                    - $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
                  description: Requested amount to be transferred from the Payer to Payee.
                transactionType:
                  allOf:
                    - title: TransactionType
                      type: object
                      description: Data model for the complex type TransactionType.
                      properties:
                        scenario:
                          title: TransactionScenario
                          type: string
                          enum:
                            - DEPOSIT
                            - WITHDRAWAL
                            - TRANSFER
                            - PAYMENT
                            - REFUND
                          description: |
                            Below are the allowed values for the enumeration.
                            - DEPOSIT - Used for performing a Cash-In (deposit) transaction.
                            In a normal scenario, electronic funds are transferred from a
                            Business account to a Consumer account, and physical cash is given
                            from the Consumer to the Business User.
                            - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction.
                            In a normal scenario, electronic funds are transferred from a Consumer’s
                            account to a Business account, and physical cash is given from the Business
                            User to the Consumer.
                            - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer)
                            transaction.
                            - PAYMENT - Usually used for performing a transaction from a Consumer to a
                            Merchant or Organization, but could also be for a B2B (Business to Business)
                            payment. The transaction could be online for a purchase in an Internet store,
                            in a physical store where both the Consumer and Business User are present, a
                            bill payment, a donation, and so on.
                            - REFUND - Used for performing a refund of transaction.
                          example: DEPOSIT
                        subScenario:
                          title: TransactionSubScenario
                          type: string
                          pattern: '^[A-Z_]{1,32}$'
                          description: 'Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).'
                          example: LOCALLY_DEFINED_SUBSCENARIO
                        initiator:
                          title: TransactionInitiator
                          type: string
                          enum:
                            - PAYER
                            - PAYEE
                          description: |
                            Below are the allowed values for the enumeration.
                            - PAYER - Sender of funds is initiating the transaction.
                            The account to send from is either owned by the Payer or is connected to the
                            Payer in some way.
                            - PAYEE - Recipient of the funds is initiating the transaction by sending a
                            transaction request. The Payer must approve the transaction, either
                            automatically by a pre-generated OTP or by pre-approval of the Payee,
                            or by manually approving in his or her own Device.
                          example: PAYEE
                        initiatorType:
                          title: TransactionInitiatorType
                          type: string
                          enum:
                            - CONSUMER
                            - AGENT
                            - BUSINESS
                            - DEVICE
                          description: |
                            Below are the allowed values for the enumeration.
                            - CONSUMER - Consumer is the initiator of the transaction.
                            - AGENT - Agent is the initiator of the transaction.
                            - BUSINESS - Business is the initiator of the transaction.
                            - DEVICE - Device is the initiator of the transaction.
                          example: CONSUMER
                        refundInfo:
                          title: Refund
                          type: object
                          description: Data model for the complex type Refund.
                          properties:
                            originalTransactionId:
                              $ref: '#/components/schemas/CreateConsentRequest/properties/id'
                            refundReason:
                              title: RefundReason
                              type: string
                              minLength: 1
                              maxLength: 128
                              description: Reason for the refund.
                              example: Free text indicating reason for the refund.
                          required:
                            - originalTransactionId
                        balanceOfPayments:
                          title: BalanceOfPayments
                          type: string
                          pattern: '^[1-9]\d{2}$'
                          description: |
                            (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/)
                            is a JSON String of 3 characters, consisting of digits only.
                            Negative numbers are not allowed. A leading zero is not allowed.
                          example: 123
                      required:
                        - scenario
                        - initiator
                        - initiatorType
                  description: Type of transaction.
                expiration:
                  type: string
                  description: |
                    Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond.
                  example: '2016-05-24T08:38:08.699-04:00'
              required:
                - transactionRequestId
                - sourceAccountId
                - consentId
                - payee
                - payer
                - amountType
                - amount
                - transactionType
                - expiration
            example:
              transactionRequestId: 8d34f91d-d078-4077-8263-2c047876fcf6
              sourceAccountId: dfspa.alice.1234
              consentId: '111'
              payee:
                partyIdInfo:
                  partyIdType: MSISDN
                  partyIdentifier: +44 1234 5678
                  fspId: dfspb
              payer:
                personalInfo:
                  complexName:
                    firstName: Alice
                    lastName: K
                partyIdInfo:
                  partyIdType: MSISDN
                  partyIdentifier: +44 8765 4321
                  fspId: dfspa
              amountType: SEND
              amount:
                amount: '100'
                currency: USD
              transactionType:
                scenario: TRANSFER
                initiator: PAYER
                initiatorType: CONSUMER
              expiration: '2020-07-15T22:17:28.985-01:00'
      responses:
        '202':
          $ref: '#/paths/~1participants/get/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  '/thirdpartyRequests/transactions/{ID}':
    get:
      description: |
        The callback `GET /thirdpartyRequests/transactions/{ID}` is used to get information about a thirdparty request transaction.
      summary: Get third party transaction requests
      tags:
        - thirdpartyRequests
      operationId: GetThirdpartyTransactionRequests
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      responses:
        '200':
          $ref: '#/paths/~1authorizations~1%7BID%7D/post/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
    patch:
      description: |
        The callback `PATCH /thirdpartyRequests/transactions/{ID}` is used to inform the client of the result of a previously-requested transaction. The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request.
      summary: Update third party transaction requests
      tags:
        - thirdpartyRequests
      operationId: UpdateThirdpartyTransactionRequests
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: Transaction request result returned.
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyRequestsTransactionIDPutResponse
              type: object
              description: 'The object sent in the PUT /thirdPartyRequests/transactions/{ID} request.'
              properties:
                transactionId:
                  $ref: '#/components/schemas/CreateConsentRequest/properties/id'
                  description: |
                    Identifies a related transaction (if a transaction has been created).
                transactionRequestState:
                  description: State of the transaction request.
                  title: TransactionRequestState
                  type: string
                  enum:
                    - RECEIVED
                    - PENDING
                    - ACCEPTED
                    - REJECTED
                  example: RECEIVED
            example:
              transactionId: 2f169631-ef99-4cb1-96dc-91e8fc08f539
              transactionRequestState: ACCEPTED
      responses:
        '200':
          $ref: '#/paths/~1authorizations~1%7BID%7D/post/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  '/thirdpartyRequests/transactions/{ID}/authorizations':
    post:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: VerifyThirdPartyAuthorization
      summary: VerifyThirdPartyAuthorization
      description: |
        The HTTP request `POST /thirdpartyRequests/transactions/{id}/authorizations` is used by the DFSP to verify a third party authorization.
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: The thirdparty authorization details to verify
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyAuthorizationIDPostRequest
              type: object
              description: 'The object sent in the POST /thirdpartyRequests/transactions/{id}/authorizations request.'
              properties:
                challenge:
                  type: string
                  description: The original Challenge Object as a JSON string
                value:
                  allOf:
                    - $ref: '#/paths/~1thirdpartyRequests~1transactions~1%7BID%7D~1authorizations/put/requestBody/content/application~1json/schema/properties/value/allOf/0'
                  description: Base64 encoded binary string - the signed challenge
                consentId:
                  allOf:
                    - $ref: '#/components/schemas/CreateConsentRequest/properties/id'
                  description: |
                    Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
                sourceAccountId:
                  allOf:
                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/sourceAccountId/allOf/0'
                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
                status:
                  type: string
                  enum:
                    - PENDING
                  description: The status of the authorization. This MUST be PENDING for a POST request
              required:
                - challenge
                - value
                - consentId
                - sourceAccountId
                - status
            example:
              challenge: <QuoteResponse object>
              value: <base64 encoded binary - the signed quote response object>
              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr
              sourceAccountId: dfspa.alice.1234
              status: PENDING
      responses:
        '202':
          $ref: '#/paths/~1participants/get/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
    put:
      tags:
        - thirdpartyRequests
        - sampled
      operationId: UpdateThirdpartyAuthorization
      summary: UpdateThirdpartyAuthorization
      description: |
        The HTTP request `PUT /thirdpartyRequests/transactions/{id}/authorizations` is used by the auth-service to update a thirdparty authorization after successful validation.
        For an unsuccessful authorization result, the `PUT /thirdpartyRequests/transactions/{id}/authorizations/error` will be called by the auth-service, instead of this endpoint.
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: The thirdparty authorization details to update
        required: true
        content:
          application/json:
            schema:
              title: ThirdpartyAuthorizationIDPutRequest
              type: object
              description: 'The object sent in the PUT /thirdpartyRequests/transactions/{id}/authorizations request.'
              properties:
                challenge:
                  type: string
                  description: The original Challenge Object as a JSON string
                value:
                  allOf:
                    - type: string
                      pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
                      description: |
                        The API data type BinaryString is a JSON String.
                        The string is a base64url  encoding of a string of raw bytes,
                        where padding (character ‘=’) is added at the end of the data if
                        needed to ensure that the string is a multiple of 4 characters.
                        The length restriction indicates the allowed number of characters.
                  description: Base64 encoded binary string - the signed challenge
                consentId:
                  allOf:
                    - $ref: '#/components/schemas/CreateConsentRequest/properties/id'
                  description: |
                    Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction.
                sourceAccountId:
                  allOf:
                    - $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/sourceAccountId/allOf/0'
                  description: 'DFSP specific account identifiers, e.g. `dfspa.alice.1234`'
                status:
                  type: string
                  enum:
                    - VERIFIED
                  description: The status of the authorization. This value must be `VERIFIED` for a PUT request
              required:
                - challenge
                - value
                - consentId
                - sourceAccountId
                - status
            example:
              challenge: <QuoteResponse object>
              value: <base64 encoded binary - the signed quote response object>
              consentId: 8d34f91d-d078-4077-8263-2c0498dhbjr
              sourceAccountId: dfspa.alice.1234
              status: VERIFIED
      responses:
        '200':
          $ref: '#/paths/~1authorizations~1%7BID%7D/post/responses/200'
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  /authorizations:
    post:
      tags:
        - authorizations
      operationId: OutboundAuthorizationsPost
      summary: Outbound Authorizations endpoint
      description: DFSP Requests Authorization of Transaction from the End User
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          description: |
            The `Accept` header field indicates the version of the API the client
            would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema:
            type: integer
          description: |
            The `Content-Length` header field indicates the anticipated size of the
            payload body. Only sent if there is a body.
            **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
        - name: Content-Type
          in: header
          schema:
            type: string
          required: true
          description: |
            The `Content-Type` header indicates the specific version of the API used
            to send the payload body.
        - name: Date
          in: header
          schema:
            type: string
          required: true
          description: The `Date` header field indicates the date when the request was sent.
        - name: X-Forwarded-For
          in: header
          schema:
            type: string
          required: false
          description: |
            The `X-Forwarded-For` header field is an unofficially accepted standard used
            for informational purposes of the originating client IP address, as a
            request might pass multiple proxies, firewalls, and so on. Multiple
            `X-Forwarded-For` values should be expected and supported by implementers
            of the API.
            **Note:** An alternative to `X-Forwarded-For` is defined in
            [RFC 7239](https://tools.ietf.org/html/rfc7239).
            However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
        - name: FSPIOP-Source
          in: header
          schema:
            type: string
          required: true
          description: |
            The `FSPIOP-Source` header field is a non-HTTP standard field
            used by the API for identifying the sender of the HTTP request.
            The field should be set by the original sender of the request.
            Required for routing and signature verification
            (see header field `FSPIOP-Signature`).
        - name: FSPIOP-Destination
          in: header
          schema:
            type: string
          required: false
          description: |
            The `FSPIOP-Destination` header field is a non-HTTP standard field used by
            the API for HTTP header based routing of requests and responses to the
            destination. The field should be set by the original sender of the request
            (if known), so that any entities between the client and the server do not
            need to parse the payload for routing purposes.
        - name: FSPIOP-Encryption
          in: header
          schema:
            type: string
          required: false
          description: |
            The `FSPIOP-Encryption` header field is a non-HTTP standard field used by
            the API for applying end-to-end encryption of the request.
        - name: FSPIOP-Signature
          in: header
          schema:
            type: string
          required: false
          description: |
            The `FSPIOP-Signature` header field is a non-HTTP standard field used by the
            API for applying an end-to-end request signature.
        - name: FSPIOP-URI
          in: header
          schema:
            type: string
          required: false
          description: |
            The `FSPIOP-URI` header field is a non-HTTP standard field used by the API
            for signature verification, should contain the service URI. Required if
            signature verification is used, for more information, see
            [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
        - name: FSPIOP-HTTP-Method
          in: header
          schema:
            type: string
          required: false
          description: |
            The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by
            the API for signature verification, should contain the service HTTP method.
            Required if signature verification is used, for more information, see
            [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).
      requestBody:
        description: Authorization request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest'
            example:
              application/json:
                authenticationType: U2F
                retriesLeft: '1'
                amount:
                  currency: USD
                  amount: '124.45'
                transactionId: 2f169631-ef99-4cb1-96dc-91e8fc08f539
                transactionRequestId: 02e28448-3c05-4059-b5f7-d518d0a2d8ea
                quote:
                  transferAmount:
                    currency: USD
                    amount: '124.45'
                  payeeReceiveAmount:
                    currency: USD
                    amount: '123.45'
                  payeeFspFee:
                    currency: USD
                    amount: '1.00'
                  payeeFspCommission:
                    currency: USD
                    amount: '0'
                  expiration: '2020-08-24T08:38:08.699-04:00'
                  geoCode:
                    latitude: '+45.4215'
                    longitude: '+75.6972'
                  ilpPacket: AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZ
                  condition: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
                  extensionList:
                    extension:
                      - key: errorDescription
                        value: This is a more detailed error description
      responses:
        '202':
          $ref: '#/paths/~1participants/get/responses/200'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
                properties:
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties:
                      errorCode:
                        title: ErrorCode
                        type: string
                        pattern: '^[1-9]\d{3}$'
                        description: |
                          The API data type ErrorCode is a JSON String of four characters,
                          consisting of digits only. Negative numbers are not allowed.
                          A leading zero is not allowed. Each error code in the API is a
                          four-digit number, for example, 1234, where the first number
                          (1 in the example) represents the high-level error category,
                          the second number (2 in the example) represents the low-level error category,
                          and the last two numbers (34 in the example) represent the specific error.
                        example: 5100
                      errorDescription:
                        title: ErrorDescription
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Error description string.
                        example: This is an error description.
                      extensionList:
                        $ref: '#/paths/~1authorizations/post/requestBody/content/application~1json/schema/properties/quote/properties/extensionList'
                    required:
                      - errorCode
                      - errorDescription
          headers:
            Content-Length:
              required: false
              schema:
                type: integer
              description: |
                The `Content-Length` header field indicates the anticipated
                size of the payload body. Only sent if there is a body.
                **Note:** The API supports a maximum size of 5242880 bytes
                (5 Megabytes).
            Content-Type:
              schema:
                type: string
              required: true
              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Type'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Type'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Type'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Type'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Type'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Type'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1consents~1%7BID%7D/put/responses/400/headers/Content-Type'
  '/authorizations/{ID}':
    post:
      tags:
        - authorizations
      operationId: InboundAuthorizationsIDPutResponse
      summary: Inbound Authorizations endpoint
      description: |
        The callback PUT /authorizations/ is used to inform the client of the
        result of a previously-requested authorization. The ID in the URI should
        contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: Authorization request details
        required: true
        content:
          application/json:
            schema:
              title: AuthorizationsIDPutResponse
              type: object
              description: 'The object sent in the PUT /authorizations/{ID} callback.'
              properties:
                authenticationInfo:
                  title: AuthenticationInfo
                  type: object
                  description: Data model for the complex type AuthenticationInfo.
                  properties:
                    authentication:
                      title: AuthenticationType
                      type: string
                      enum:
                        - OTP
                        - QRCODE
                      description: |
                        Below are the allowed values for the enumeration AuthenticationType.
                        - OTP - One-time password generated by the Payer FSP.
                        - QRCODE - QR code used as One Time Password.
                      example: OTP
                    authenticationValue:
                      title: AuthenticationValue
                      oneOf:
                        - title: OtpValue
                          type: string
                          pattern: '^\d{3,10}$'
                          description: |
                            The API data type OtpValue is a JSON String of 3 to 10 characters,
                            consisting of digits only. Negative numbers are not allowed.
                            One or more leading zeros are allowed.
                        - title: QRCODE
                          type: string
                          minLength: 1
                          maxLength: 64
                          description: QR code used as a One Time Password.
                      pattern: '^\d{3,10}$|^\S{1,64}$'
                      description: |
                        Contains the authentication value. The format depends on the authentication
                        type used in the AuthenticationInfo complex type.
                      example: 1234
                  required:
                    - authentication
                    - authenticationValue
                responseType:
                  title: AuthorizationResponse
                  type: string
                  enum:
                    - ENTERED
                    - REJECTED
                    - RESEND
                  description: |
                    Below are the allowed values for the enumeration.
                    - ENTERED - Consumer entered the authentication value.
                    - REJECTED - Consumer rejected the transaction.
                    - RESEND - Consumer requested to resend the authentication value.
                  example: ENTERED
              required:
                - responseType
            example:
              application/json:
                authenticationInfo:
                  authentication: U2F
                  authenticationValue:
                    pinValue: '233133331'
                    counter: '1'
                responseType: ENTERED
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
  '/thirdPartyAuthorizations/{ID}':
    post:
      tags:
        - authorizations
      operationId: InboundAuthorizationsIDPutResponse
      summary: Inbound Authorizations endpoint
      description: |
        The callback PUT /authorizations/ is used to inform the client of the
        result of a previously-requested authorization. The ID in the URI should
        contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND
      parameters:
        - $ref: '#/paths/~1consents~1%7BID%7D/put/parameters/0'
        - $ref: '#/paths/~1authorizations/post/parameters/1'
        - $ref: '#/paths/~1authorizations/post/parameters/2'
        - $ref: '#/paths/~1authorizations/post/parameters/3'
        - $ref: '#/paths/~1authorizations/post/parameters/4'
        - $ref: '#/paths/~1authorizations/post/parameters/5'
        - $ref: '#/paths/~1authorizations/post/parameters/6'
        - $ref: '#/paths/~1authorizations/post/parameters/7'
        - $ref: '#/paths/~1authorizations/post/parameters/8'
        - $ref: '#/paths/~1authorizations/post/parameters/9'
        - $ref: '#/paths/~1authorizations/post/parameters/10'
      requestBody:
        description: Authorization request details
        required: true
        content:
          application/json:
            schema:
              title: AuthorizationsIDPutResponse
              type: object
              description: 'The object sent in the PUT /authorizations/{ID} callback.'
              properties:
                authenticationInfo:
                  title: AuthenticationInfo
                  type: object
                  description: Data model for the complex type AuthenticationInfo.
                  properties:
                    authentication:
                      title: AuthenticationType
                      type: string
                      enum:
                        - OTP
                        - QRCODE
                      description: |
                        Below are the allowed values for the enumeration AuthenticationType.
                        - OTP - One-time password generated by the Payer FSP.
                        - QRCODE - QR code used as One Time Password.
                      example: OTP
                    authenticationValue:
                      title: AuthenticationValue
                      oneOf:
                        - title: OtpValue
                          type: string
                          pattern: '^\d{3,10}$'
                          description: |
                            The API data type OtpValue is a JSON String of 3 to 10 characters,
                            consisting of digits only. Negative numbers are not allowed.
                            One or more leading zeros are allowed.
                        - title: QRCODE
                          type: string
                          minLength: 1
                          maxLength: 64
                          description: QR code used as a One Time Password.
                      pattern: '^\d{3,10}$|^\S{1,64}$'
                      description: |
                        Contains the authentication value. The format depends on the authentication
                        type used in the AuthenticationInfo complex type.
                      example: 1234
                  required:
                    - authentication
                    - authenticationValue
                responseType:
                  title: AuthorizationResponse
                  type: string
                  enum:
                    - ENTERED
                    - REJECTED
                    - RESEND
                  description: |
                    Below are the allowed values for the enumeration.
                    - ENTERED - Consumer entered the authentication value.
                    - REJECTED - Consumer rejected the transaction.
                    - RESEND - Consumer requested to resend the authentication value.
                  example: ENTERED
              required:
                - responseType
            example:
              application/json:
                authenticationInfo:
                  authentication: U2F
                  authenticationValue:
                    pinValue: '233133331'
                    counter: '1'
                responseType: ENTERED
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/paths/~1authorizations/post/responses/400'
        '401':
          $ref: '#/paths/~1authorizations/post/responses/401'
        '403':
          $ref: '#/paths/~1authorizations/post/responses/403'
        '404':
          $ref: '#/paths/~1authorizations/post/responses/404'
        '405':
          $ref: '#/paths/~1authorizations/post/responses/405'
        '406':
          $ref: '#/paths/~1authorizations/post/responses/406'
        '501':
          $ref: '#/paths/~1authorizations/post/responses/501'
        '503':
          $ref: '#/paths/~1authorizations/post/responses/503'
components:
  schemas:
    OutboundAuthorizationsPostRequest:
      title: authorizationsRequest
      description: POST /authorizations Request object
      type: object
      properties:
        toParticipantId:
          type: string
        authenticationType:
          $ref: '#/components/schemas/AuthenticationType'
        retriesLeft:
          title: Integer
          type: string
          pattern: '^[1-9]\d*$'
          description: |
            The API data type Integer is a JSON String consisting of digits only.
            Negative numbers and leading zeroes are not allowed.
            The data type is always limited to a specific number of digits.
        amount:
          title: Money
          type: object
          description: Data model for the complex type Money.
          properties:
            currency:
              title: Currency
              description: |
                The currency codes defined in
                [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)
                as three-letter alphabetic codes are used as the standard naming representation for currencies.
              type: string
              minLength: 3
              maxLength: 3
              enum:
                - AED
                - AFN
                - ALL
                - AMD
                - ANG
                - AOA
                - ARS
                - AUD
                - AWG
                - AZN
                - BAM
                - BBD
                - BDT
                - BGN
                - BHD
                - BIF
                - BMD
                - BND
                - BOB
                - BRL
                - BSD
                - BTN
                - BWP
                - BYN
                - BZD
                - CAD
                - CDF
                - CHF
                - CLP
                - CNY
                - COP
                - CRC
                - CUC
                - CUP
                - CVE
                - CZK
                - DJF
                - DKK
                - DOP
                - DZD
                - EGP
                - ERN
                - ETB
                - EUR
                - FJD
                - FKP
                - GBP
                - GEL
                - GGP
                - GHS
                - GIP
                - GMD
                - GNF
                - GTQ
                - GYD
                - HKD
                - HNL
                - HRK
                - HTG
                - HUF
                - IDR
                - ILS
                - IMP
                - INR
                - IQD
                - IRR
                - ISK
                - JEP
                - JMD
                - JOD
                - JPY
                - KES
                - KGS
                - KHR
                - KMF
                - KPW
                - KRW
                - KWD
                - KYD
                - KZT
                - LAK
                - LBP
                - LKR
                - LRD
                - LSL
                - LYD
                - MAD
                - MDL
                - MGA
                - MKD
                - MMK
                - MNT
                - MOP
                - MRO
                - MUR
                - MVR
                - MWK
                - MXN
                - MYR
                - MZN
                - NAD
                - NGN
                - NIO
                - NOK
                - NPR
                - NZD
                - OMR
                - PAB
                - PEN
                - PGK
                - PHP
                - PKR
                - PLN
                - PYG
                - QAR
                - RON
                - RSD
                - RUB
                - RWF
                - SAR
                - SBD
                - SCR
                - SDG
                - SEK
                - SGD
                - SHP
                - SLL
                - SOS
                - SPL
                - SRD
                - STD
                - SVC
                - SYP
                - SZL
                - THB
                - TJS
                - TMT
                - TND
                - TOP
                - TRY
                - TTD
                - TVD
                - TWD
                - TZS
                - UAH
                - UGX
                - USD
                - UYU
                - UZS
                - VEF
                - VND
                - VUV
                - WST
                - XAF
                - XCD
                - XDR
                - XOF
                - XPF
                - YER
                - ZAR
                - ZMW
                - ZWD
              example: USD
            amount:
              title: Amount
              type: string
              pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'
              description: |
                The API data type Amount is a JSON String in a canonical format that is
                restricted by a regular expression for interoperability reasons.
                This pattern does not allow any trailing zeroes at all, but allows an amount
                without a minor currency unit. It also only allows four digits in the minor
                currency unit; a negative value is not allowed. Using more than 18 digits
                in the major currency unit is not allowed.
              example: 123.45
          required:
            - currency
            - amount
        transactionId:
          $ref: '#/components/schemas/CreateConsentRequest/properties/id'
        transactionRequestId:
          $ref: '#/components/schemas/CreateConsentRequest/properties/id'
        quote:
          title: QuotesIDPutResponse
          type: object
          description: 'The object sent in the PUT /quotes/{ID} callback.'
          properties:
            transferAmount:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
            payeeReceiveAmount:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
            payeeFspFee:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
            payeeFspCommission:
              $ref: '#/components/schemas/OutboundAuthorizationsPostRequest/properties/amount'
            expiration:
              title: DateTime
              type: string
              pattern: '^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$'
              description: |
                The API data type DateTime is a JSON String in a lexical format that is
                restricted by a regular expression for interoperability reasons.
                The format is according to
                [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html),
                expressed in a combined date, time and time zone format.
                A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM].
                Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\"
                (where Z indicates Zulu time zone, same as UTC).
              example: '2016-05-24T08:38:08.699-04:00'
            geoCode:
              title: GeoCode
              type: object
              description: |
                Data model for the complex type GeoCode.
                Indicates the geographic location from where the transaction was initiated.
              properties:
                latitude:
                  title: Latitude
                  type: string
                  pattern: '^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$'
                  description: |
                    The API data type Latitude is a JSON String in a lexical format that is
                    restricted by a regular expression for interoperability reasons.
                  example: '+45.4215'
                longitude:
                  title: Longitude
                  type: string
                  pattern: '^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$'
                  description: |
                    The API data type Longitude is a JSON String in a lexical format that
                    is restricted by a regular expression for interoperability reasons.
                  example: '+75.6972'
              required:
                - latitude
                - longitude
            ilpPacket:
              title: IlpPacket
              type: string
              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'
              minLength: 1
              maxLength: 32768
              description: Information for recipient (transport layer information).
              example: AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA
            condition:
              title: IlpCondition
              type: string
              pattern: '^[A-Za-z0-9-_]{43}$'
              maxLength: 48
              description: Condition that must be attached to the transfer by the Payer.
              example: f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA
            extensionList:
              title: ExtensionList
              type: object
              description: |
                Data model for the complex type ExtensionList.
                An optional list of extensions, specific to deployment.
              properties:
                extension:
                  type: array
                  items:
                    title: Extension
                    type: object
                    description: Data model for the complex type Extension.
                    properties:
                      key:
                        title: ExtensionKey
                        type: string
                        minLength: 1
                        maxLength: 32
                        description: Extension key.
                      value:
                        title: ExtensionValue
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Extension value.
                    required:
                      - key
                      - value
                  minItems: 1
                  maxItems: 16
                  description: Number of Extension elements.
              required:
                - extension
          required:
            - transferAmount
            - expiration
            - ilpPacket
            - condition
      required:
        - authenticationType
        - retriesLeft
        - amount
        - transactionId
        - transactionRequestId
        - quote
      additionalProperties: false
    AuthenticationType:
      title: AuthenticationType
      type: string
      enum:
        - OTP
        - QRCODE
        - U2F
      description: |
        Below are the allowed values for the enumeration AuthenticationType.
        - OTP - One-time password generated by the Payer FSP.
        - QRCODE - QR code used as One Time Password.
        - U2F
      example: U2F
    CreateConsentRequest:
      title: CreateConsentRequest
      type: object
      description: The object sent in a `POST /consentRequests` request
      properties:
        id:
          title: CorrelationId
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
          description: |
            Identifier that correlates all messages of the same sequence.
            The API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122),
            that is restricted by a regular expression for interoperability reasons.
            A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        initiatorId:
          type: string
          description: The id of the PISP who will initiate transactions on a user's behalf
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            properties:
              scope:
                title: AuthScopesType
                type: string
                enum:
                  - accounts.getBalance
                  - accounts.transfer
                description: |
                  The scopes requested for a ConsentRequest.
                  - "accounts.getBalance" - Get the balance of a given account.
                  - "accounts.transfer" - Initiate a transfer from an account.
              accountId:
                $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/sourceAccountId/allOf/0'
            required:
              - scope
              - accountId
        authChannels:
          type: array
          items:
            title: AuthChannelsType
            type: string
            enum:
              - WEB
              - OTP
            description: |
              The auth channel being used for the consentRequest.
              - "WEB" - The Web auth channel
              - "OTP" - The OTP auth channel
        callbackUri:
          type: string
          description: The callback uri that the user will be redirected to after completing the WEB auth channel
      required:
        - id
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
    UpdateConsentRequest:
      title: UpdateConsentRequest
      type: object
      description: The object sent in a `PUT /consentRequests` request
      properties:
        id:
          $ref: '#/components/schemas/CreateConsentRequest/properties/id'
        initiatorId:
          type: string
          description: The id of the PISP who will initiate transactions on a user's behalf
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/CreateConsentRequest/properties/scopes/items'
        authChannels:
          type: array
          items:
            $ref: '#/components/schemas/CreateConsentRequest/properties/authChannels/items'
        callbackUri:
          type: string
          description: The callback uri that the user will be redirected to after completing the WEB auth channel
        authUri:
          type: string
          description: The callback uri that the pisp app redirects to for user to complete their login
        authToken:
          type: string
          description: The Auth token from the OTP or redirect to pisp app
      required:
        - id
        - initiatorId
        - scopes
        - authChannels
        - callbackUri
        - authUri
        - authToken
