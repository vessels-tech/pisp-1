{
	"info": {
		"_postman_id": "4782e366-cbc6-45c0-b9c4-557042912b53",
		"name": "PISP.postman_collection.json",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add parties to DFSP backends",
			"item": [
				{
					"name": "Add Alice account to DFSPA",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fb04c1c-59b7-4bdb-82ab-0dcd31561174",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"Alice Alpaca\",\n    \"firstName\": \"Alice\",\n    \"middleName\": \"K\",\n    \"lastName\": \"Alpaca\",\n    \"dateOfBirth\": \"1970-01-01\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"123456789\",\n    \"accounts\": [\n\t\t{ \"currency\": \"USD\",\n\t\t  \"description\": \"savings\",\n\t\t  \"address\": \"moja.amber.53451233-b82a5456a-4fa9-838b-123456789\"\n\t\t},\n\t\t{ \"currency\": \"USD\",\n\t\t  \"description\": \"checkings\",\n\t\t  \"address\": \"moja.amber.8f027046-b8236345a-4fa9-838b-123456789\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:9003/repository/parties",
							"host": [
								"localhost"
							],
							"port": "9003",
							"path": [
								"repository",
								"parties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Bob account to DFSPB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "575ffd01-e396-4e01-bd93-681b6bf1438e",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"Bob Babirusa\",\n    \"firstName\": \"Bob\",\n    \"middleName\": \"O\",\n    \"lastName\": \"Babirusa\",\n    \"dateOfBirth\": \"1970-01-01\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"987654321\",\n    \"accounts\": [\n\t\t{ \"currency\": \"USD\",\n\t\t  \"description\": \"savings\",\n\t\t  \"address\": \"moja.burgundy.76542756-f49gk439f-6a5f-543d-987654321\"\n\t\t},\n\t\t{ \"currency\": \"USD\",\n\t\t  \"description\": \"checkings\",\n\t\t  \"address\": \"moja.burgundy.43638980-f49gk439f-6a5f-543d-987654321\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:10003/repository/parties",
							"host": [
								"localhost"
							],
							"port": "10003",
							"path": [
								"repository",
								"parties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add PISP account to PISP SIM",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "575ffd01-e396-4e01-bd93-681b6bf1438e",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"displayName\": \"PISP SIM\",\n    \"firstName\": \"PISP\",\n    \"middleName\": \"O\",\n    \"lastName\": \"SIM\",\n    \"dateOfBirth\": \"1970-01-01\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"999999999\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:11003/repository/parties",
							"host": [
								"localhost"
							],
							"port": "11003",
							"path": [
								"repository",
								"parties"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "E2E Tests",
			"item": [
				{
					"name": "Successful E2E transfer Alice to Bob",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ea1ecb7-ca7b-45d3-84a9-9e203ac555c9",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"",
									"",
									"pm.environment.set('payerIdType', 'MSISDN');",
									"pm.environment.set('payerIdValue', '123456789');",
									"",
									"pm.environment.set('payeeIdType', 'MSISDN');",
									"pm.environment.set('payeeIdValue', '987654321');",
									"",
									"pm.environment.set('amount', '100');",
									"pm.environment.set('currency', 'USD');",
									"pm.environment.set('note', 'Test note');",
									"pm.environment.set('homeTransactionId', '123ABC');",
									"",
									"pm.environment.set('amountType', 'SEND');",
									"pm.environment.set('transactionType', 'TRANSFER');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3022fda-b665-4d6d-998e-af82b47d4c87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    var headers = pm.response.json().headers;",
									"    var jsonData = pm.response.json().scenario1.result;",
									"",
									"    pm.test(\"transfer should have completed\", function () {",
									"       pm.expect(jsonData.currentState).to.eql(\"COMPLETED\");",
									"       pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
									"    });",
									"    ",
									"    pm.test(\"payerfsp data should have the same payer as request\", function () {",
									"       pm.expect(jsonData.from.idType).to.eql(pm.environment.get(\"payerIdType\"));",
									"       pm.expect(jsonData.from.idValue).to.eql(pm.environment.get(\"payerIdValue\"));",
									"    });",
									"                ",
									"    pm.test(\"payeefsp data should have the same payer as request\", function () {",
									"       pm.expect(jsonData.to.idType).to.eql(pm.environment.get(\"payeeIdType\"));",
									"       pm.expect(jsonData.to.idValue).to.eql(pm.environment.get(\"payeeIdValue\"));",
									"    });",
									"    ",
									"                    ",
									"    pm.test(\"quote data should have correct transfer amount and currency\", function () {",
									"        pm.expect(jsonData.quoteResponse.transferAmount.amount).to.eql(pm.environment.get(\"amount\"));",
									"        pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql(pm.environment.get(\"currency\"));",
									"",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n\t\t    \"from\": {\n\t\t        \"idType\": \"{{payerIdType}}\",\n\t\t        \"idValue\": \"{{payerIdValue}}\"\n\t\t    },\n\t\t    \"to\": {\n\t\t        \"idType\": \"{{payeeIdType}}\",\n\t\t        \"idValue\": \"{{payeeIdValue}}\"\n\t\t    },\n\t\t    \"amountType\": \"{{amountType}}\",\n\t\t    \"currency\": \"{{currency}}\",\n\t\t    \"amount\":  \"{{amount}}\",\n\t\t    \"transactionType\": \"{{transactionType}}\",\n\t\t    \"note\": \"{{note}}\",\n\t\t    \"homeTransactionId\": \"{{homeTransactionId}}\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "http://localhost:9003/scenarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9003",
							"path": [
								"scenarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payee Rejection E2E transfer Alice to Bob",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ea1ecb7-ca7b-45d3-84a9-9e203ac555c9",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"",
									"",
									"pm.environment.set('payerIdType', 'MSISDN');",
									"pm.environment.set('payerIdValue', '123456789');",
									"",
									"pm.environment.set('payeeIdType', 'MSISDN');",
									"pm.environment.set('payeeIdValue', '987654321');",
									"",
									"pm.environment.set('amount', '5105');",
									"pm.environment.set('currency', 'USD');",
									"pm.environment.set('note', 'Test note');",
									"pm.environment.set('homeTransactionId', '123ABC');",
									"",
									"pm.environment.set('amountType', 'SEND');",
									"pm.environment.set('transactionType', 'TRANSFER');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3022fda-b665-4d6d-998e-af82b47d4c87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    var headers = pm.response.json().headers;",
									"    var result = pm.response.json().scenario1.result;",
									"    var transferState = result.transferState;",
									"",
									"    pm.test(\"transfer should have status code of 5105\", function () {",
									"       pm.expect(result.statusCode).to.eql(\"5105\");",
									"    });",
									"    ",
									"    pm.test(\"transfer current state should have errored\", function () {",
									"       pm.expect(transferState.currentState).to.eql(\"ERROR_OCCURRED\");",
									"    });",
									"    ",
									"    pm.test(\"payerfsp data should have the same payer as request\", function () {",
									"       pm.expect(transferState.from.idType).to.eql(pm.environment.get(\"payerIdType\"));",
									"       pm.expect(transferState.from.idValue).to.eql(pm.environment.get(\"payerIdValue\"));",
									"    });",
									"                ",
									"    pm.test(\"payeefsp data should have the same payer as request\", function () {",
									"       pm.expect(transferState.to.idType).to.eql(pm.environment.get(\"payeeIdType\"));",
									"       pm.expect(transferState.to.idValue).to.eql(pm.environment.get(\"payeeIdValue\"));",
									"    });",
									"    ",
									"                    ",
									"    pm.test(\"quote data should have correct transfer amount and currency\", function () {",
									"        pm.expect(transferState.quoteResponse.transferAmount.amount).to.eql(pm.environment.get(\"amount\"));",
									"        pm.expect(transferState.quoteResponse.transferAmount.currency).to.eql(pm.environment.get(\"currency\"));",
									"",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n\t\t    \"from\": {\n\t\t        \"idType\": \"{{payerIdType}}\",\n\t\t        \"idValue\": \"{{payerIdValue}}\"\n\t\t    },\n\t\t    \"to\": {\n\t\t        \"idType\": \"{{payeeIdType}}\",\n\t\t        \"idValue\": \"{{payeeIdValue}}\"\n\t\t    },\n\t\t    \"amountType\": \"{{amountType}}\",\n\t\t    \"currency\": \"{{currency}}\",\n\t\t    \"amount\":  \"{{amount}}\",\n\t\t    \"transactionType\": \"{{transactionType}}\",\n\t\t    \"note\": \"{{note}}\",\n\t\t    \"homeTransactionId\": \"{{homeTransactionId}}\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "http://localhost:9003/scenarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9003",
							"path": [
								"scenarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful E2E transfer Bob to Alice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ea1ecb7-ca7b-45d3-84a9-9e203ac555c9",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"",
									"",
									"pm.environment.set('payerIdType', 'MSISDN');",
									"pm.environment.set('payerIdValue', '987654321');",
									"",
									"pm.environment.set('payeeIdType', 'MSISDN');",
									"pm.environment.set('payeeIdValue', '123456789');",
									"",
									"pm.environment.set('amount', '100');",
									"pm.environment.set('currency', 'USD');",
									"pm.environment.set('note', 'Test note');",
									"pm.environment.set('homeTransactionId', '123ABC');",
									"",
									"pm.environment.set('amountType', 'SEND');",
									"pm.environment.set('transactionType', 'TRANSFER');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3022fda-b665-4d6d-998e-af82b47d4c87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    ",
									"    var headers = pm.response.json().headers;",
									"    var jsonData = pm.response.json().scenario1.result;",
									"",
									"    pm.test(\"transfer should have completed\", function () {",
									"       pm.expect(jsonData.currentState).to.eql(\"COMPLETED\");",
									"       pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
									"    });",
									"    ",
									"    pm.test(\"payerfsp data should have the same payer as request\", function () {",
									"       pm.expect(jsonData.from.idType).to.eql(pm.environment.get(\"payerIdType\"));",
									"       pm.expect(jsonData.from.idValue).to.eql(pm.environment.get(\"payerIdValue\"));",
									"    });",
									"                ",
									"    pm.test(\"payeefsp data should have the same payer as request\", function () {",
									"       pm.expect(jsonData.to.idType).to.eql(pm.environment.get(\"payeeIdType\"));",
									"       pm.expect(jsonData.to.idValue).to.eql(pm.environment.get(\"payeeIdValue\"));",
									"    });",
									"    ",
									"                    ",
									"    pm.test(\"quote data should have correct transfer amount and currency\", function () {",
									"        pm.expect(jsonData.quoteResponse.transferAmount.amount).to.eql(pm.environment.get(\"amount\"));",
									"        pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql(pm.environment.get(\"currency\"));",
									"",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n\t\t    \"from\": {\n\t\t        \"idType\": \"{{payerIdType}}\",\n\t\t        \"idValue\": \"{{payerIdValue}}\"\n\t\t    },\n\t\t    \"to\": {\n\t\t        \"idType\": \"{{payeeIdType}}\",\n\t\t        \"idValue\": \"{{payeeIdValue}}\"\n\t\t    },\n\t\t    \"amountType\": \"{{amountType}}\",\n\t\t    \"currency\": \"{{currency}}\",\n\t\t    \"amount\":  \"{{amount}}\",\n\t\t    \"transactionType\": \"{{transactionType}}\",\n\t\t    \"note\": \"{{note}}\",\n\t\t    \"homeTransactionId\": \"{{homeTransactionId}}\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "http://localhost:10003/scenarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "10003",
							"path": [
								"scenarios"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PISP-Initiate-TRX-Reqs-Tests",
			"item": [
				{
					"name": "pisp - GET /parties & initiate transactionRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f61eea5b-d7db-4886-bebd-f4671c3a0324",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(`homeTransactionId is: ${pm.variables.get('homeTransactionId')}`, function () {",
									"    pm.expect(jsonData.homeTransactionId).to.eql(pm.variables.get('homeTransactionId'));",
									"});",
									"",
									"pm.test(`from.idType is MSISDN`, function () {",
									"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
									"    pm.environment.set('requestToPayInitiatorIdType', jsonData.from.idType);",
									"});",
									"",
									"pm.test(`from.idValue is 987654321`, function () {",
									"    pm.expect(jsonData.from.idValue).to.eql('987654321');",
									"    pm.environment.set('requestToPayInitiatorIdValue', jsonData.from.idValue);",
									"});",
									"",
									"pm.test(`from.fspId is pisp`, function () {",
									"    pm.expect(jsonData.from.fspId).to.eql('pisp');",
									"    pm.environment.set('requestToPayInitiatorFspId', jsonData.from.fspId);",
									"});",
									"",
									"pm.test(`to.idType is MSISDN`, function () {",
									"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
									"});",
									"",
									"pm.test(`to.idValue is ${pm.environment.get('payerfspMSISDN')}`, function () {",
									"    pm.expect(jsonData.to.idValue).to.eql(pm.environment.get('payerfspMSISDN'));",
									"});",
									"",
									"pm.test(`to.fspId is dfspa`, function () {",
									"    pm.expect(jsonData.to.fspId).to.eql('dfspa');",
									"});",
									"",
									"pm.test(`amountType is SEND`, function () {",
									"    pm.expect(jsonData.amountType).to.eql('SEND');",
									"});",
									"",
									"pm.test(`currency is ${pm.environment.get('currency')}`, function () {",
									"    pm.expect(jsonData.currency).to.eql(pm.environment.get('currency'));",
									"});",
									"",
									"pm.test(`amount is 18`, function () {",
									"    pm.expect(jsonData.amount).to.eql('18');",
									"});",
									"",
									"pm.test(`scenario is PAYMENT`, function () {",
									"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
									"});",
									"",
									"pm.test(`initiator is PAYEE`, function () {",
									"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
									"});",
									"",
									"pm.test(`initiatorType is BUSINESS`, function () {",
									"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
									"});",
									"",
									"pm.test(`transactionRequestId is not null`, function () {",
									"    pm.expect(jsonData.transactionRequestId).to.not.equal('');",
									"    pm.environment.set('transactionRequestId', jsonData.transactionRequestId);",
									"});",
									"",
									"pm.test(`currentState is COMPLETED`, function () {",
									"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
									"});",
									"",
									"pm.test(`requestToPayState is RECEIVED`, function () {",
									"    pm.expect(jsonData.requestToPayState).to.eql('RECEIVED');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fb77a956-6991-461f-9fcb-8a5a31b60cc4",
								"exec": [
									"",
									"var uuid = require('uuid');",
									"pm.variables.set('homeTransactionId', uuid.v4());",
									"",
									"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
									"pm.environment.set('payeefspMSISDN', '987654321');",
									"pm.environment.set('payerfspMSISDN', '123456789');",
									"pm.environment.set('currency', 'USD');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"homeTransactionId\": \"{{homeTransactionId}}\",\n    \"from\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"{{payeefspMSISDN}}\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"{{payerfspMSISDN}}\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"{{currency}}\",\n    \"amount\": \"18\",\n    \"scenario\":\"PAYMENT\",\n    \"initiator\":\"PAYEE\",\n    \"initiatorType\":\"BUSINESS\",\n    \"note\": \"pisp payment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7002/requestToPay",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7002",
							"path": [
								"requestToPay"
							]
						}
					},
					"response": []
				},
				{
					"name": "pisp - payerfsp POST /quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef7a6e05-5fff-41eb-a7a1-1694316beecc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.environment.set('transferId', jsonData.transferId);",
									"",
									"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
									"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
									"});",
									"",
									"pm.test(`from.idType is MSISDN`, function () {",
									"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
									"});",
									"",
									"pm.test(`from.idValue is ${pm.environment.get('payerfspMSISDN')}`, function () {",
									"    pm.expect(jsonData.from.idValue).to.eql(pm.environment.get('payerfspMSISDN'));",
									"});",
									"",
									"pm.test(`to.idType is MSISDN`, function () {",
									"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
									"});",
									"",
									"pm.test(`to.idValue 987654321`, function () {",
									"    pm.expect(jsonData.to.idValue).to.eql('987654321');",
									"});",
									"",
									"pm.test(`to.fspId is dfspb`, function () {",
									"    pm.expect(jsonData.to.fspId).to.eql('dfspb');",
									"});",
									"",
									"pm.test(`amountType is SEND`, function () {",
									"    pm.expect(jsonData.amountType).to.eql('SEND');",
									"});",
									"",
									"pm.test(`currency is ${pm.environment.get('currency')}`, function () {",
									"    pm.expect(jsonData.currency).to.eql(pm.environment.get('currency'));",
									"});",
									"",
									"pm.test(`amount is 18`, function () {",
									"    pm.expect(jsonData.amount).to.eql('18');",
									"});",
									"",
									"pm.test(`scenario is PAYMENT`, function () {",
									"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
									"});",
									"",
									"pm.test(`initiator is PAYEE`, function () {",
									"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
									"});",
									"",
									"pm.test(`initiatorType is BUSINESS`, function () {",
									"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
									"});",
									"",
									"pm.test(`currentState is WAITING_FOR_QUOTE_ACCEPTANCE`, function () {",
									"    pm.expect(jsonData.currentState).to.eql('WAITING_FOR_QUOTE_ACCEPTANCE');",
									"});",
									"",
									"pm.test(`quoteResponse is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.transferAmount.amount is 18`, function () {",
									"    pm.expect(jsonData.quoteResponse.transferAmount.amount).to.eql('18');",
									"});",
									"",
									"pm.test(`quoteResponse.transferAmount.currency is ${pm.environment.get('currency')}`, function () {",
									"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
									"});",
									"",
									"pm.test(`quoteResponse.expiration is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.condition is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
									"});",
									"",
									"pm.test(`fulfil is  null`, function () {",
									"    pm.expect(jsonData.fulfil).to.equal(undefined);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a2a8eb5-a658-4404-b26c-a7e7f37732ec",
								"exec": [
									"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
									"pm.environment.set('payeefspMSISDN', '987654321');",
									"pm.environment.set('payerfspMSISDN', '123456789');",
									"pm.environment.set('currency', 'USD');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestToPayTransactionId\": \"{{transactionRequestId}}\",\n  \"from\": {\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"123456789\"\n  },\n  \"to\": {\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"987654321\",\n    \"fspId\":\"dfspb\"\n  },\n  \"amountType\": \"SEND\",\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"18\",\n  \"scenario\":\"PAYMENT\",\n  \"initiator\":\"PAYEE\",\n  \"initiatorType\":\"BUSINESS\",\n  \"note\": \"test payment\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5002/requestToPayTransfer",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"requestToPayTransfer"
							]
						}
					},
					"response": []
				},
				{
					"name": "pisp - payerfsp has to accept the transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "931c5aea-658c-4c11-aaf6-cdba22b756a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.environment.set('transferId', jsonData.transferId);",
									"",
									"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
									"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
									"});",
									"",
									"pm.test(`from.idType is MSISDN`, function () {",
									"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
									"});",
									"",
									"pm.test(`from.idValue is ${pm.environment.get('payerfspMSISDN')}`, function () {",
									"    pm.expect(jsonData.from.idValue).to.eql(pm.environment.get('payerfspMSISDN'));",
									"});",
									"",
									"pm.test(`to.idType is MSISDN`, function () {",
									"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
									"});",
									"",
									"pm.test(`to.idValue 987654321`, function () {",
									"    pm.expect(jsonData.to.idValue).to.eql('987654321');",
									"});",
									"",
									"pm.test(`to.fspId is dfspb`, function () {",
									"    pm.expect(jsonData.to.fspId).to.eql('dfspb');",
									"});",
									"",
									"pm.test(`amountType is SEND`, function () {",
									"    pm.expect(jsonData.amountType).to.eql('SEND');",
									"});",
									"",
									"pm.test(`currency is ${pm.environment.get('currency')}`, function () {",
									"    pm.expect(jsonData.currency).to.eql(pm.environment.get('currency'));",
									"});",
									"",
									"pm.test(`amount is 18`, function () {",
									"    pm.expect(jsonData.amount).to.eql('18');",
									"});",
									"",
									"pm.test(`scenario is PAYMENT`, function () {",
									"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
									"});",
									"",
									"pm.test(`initiator is PAYEE`, function () {",
									"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
									"});",
									"",
									"pm.test(`initiatorType is BUSINESS`, function () {",
									"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
									"});",
									"",
									"pm.test(`currentState is COMPLETED`, function () {",
									"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
									"});",
									"",
									"pm.test(`quoteResponse is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.transferAmount.amount is 18`, function () {",
									"    pm.expect(jsonData.quoteResponse.transferAmount.amount).to.eql('18');",
									"});",
									"",
									"pm.test(`quoteResponse.transferAmount.currency is ${pm.environment.get('currency')}`, function () {",
									"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
									"});",
									"",
									"pm.test(`quoteResponse.expiration is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.condition is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
									"});",
									"",
									"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
									"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
									"});",
									"",
									"pm.test(`otpResponse is null`, function () {",
									"    pm.expect(jsonData.otpResponse).to.eql(undefined);",
									"});",
									"",
									"pm.test(`fulfil is not null`, function () {",
									"    pm.expect(jsonData.fulfil).to.not.equal(null);",
									"});",
									"",
									"pm.test(`fulfil.completedTimestamp is not null`, function () {",
									"    pm.expect(jsonData.fulfil.completedTimestamp).to.not.equal(null);",
									"});",
									"",
									"pm.test(`fulfil.transferState is COMMITTED`, function () {",
									"    pm.expect(jsonData.fulfil.transferState).to.eql('COMMITTED');",
									"});",
									"",
									"pm.test(`fulfil.fulfilment is not null`, function () {",
									"    pm.expect(jsonData.fulfil.fulfilment).to.not.equal(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"acceptQuote\": true\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5002/requestToPayTransfer/{{transactionRequestId}}",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"requestToPayTransfer",
								"{{transactionRequestId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ALS - GET parties",
			"item": [
				{
					"name": "ALS GET /parties - MSISDN 123456789 Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90425afb-686d-4075-b678-cd357b2c9261",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "date",
								"value": "{{dateHeader}}",
								"type": "text"
							},
							{
								"key": "fspiop-source",
								"value": "pisp",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:5002/parties/MSISDN/123456789",
							"host": [
								"localhost"
							],
							"port": "5002",
							"path": [
								"parties",
								"MSISDN",
								"123456789"
							]
						}
					},
					"response": []
				},
				{
					"name": "ALS GET /parties - MSISDN 987654321 Bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90425afb-686d-4075-b678-cd357b2c9261",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1.0"
							},
							{
								"key": "date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "fspiop-source",
								"type": "text",
								"value": "pisp"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json"
							}
						],
						"url": {
							"raw": "localhost:4002/parties/MSISDN/987654321",
							"host": [
								"localhost"
							],
							"port": "4002",
							"path": [
								"parties",
								"MSISDN",
								"987654321"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}